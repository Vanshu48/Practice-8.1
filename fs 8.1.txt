const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const path = require("path");

const app = express();
const PORT = process.env.PORT || 5000;
const SECRET_KEY = "your_secret_key";

app.use(cors());
app.use(bodyParser.json());

const users = [
  { id: 1, username: "testuser", password: bcrypt.hashSync("password123", 8) }
];

app.post("/login", (req, res) => {
  const { username, password } = req.body;
  const user = users.find(u => u.username === username);
  if (!user) return res.status(404).json({ message: "User not found" });
  const passwordIsValid = bcrypt.compareSync(password, user.password);
  if (!passwordIsValid) return res.status(401).json({ message: "Invalid password" });
  const token = jwt.sign({ id: user.id }, SECRET_KEY, { expiresIn: "1h" });
  res.json({ token, username: user.username });
});

app.get("/profile", (req, res) => {
  const authHeader = req.headers["authorization"];
  const token = authHeader && authHeader.split(" ")[1];
  if (!token) return res.status(401).json({ message: "No token provided" });
  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) return res.status(403).json({ message: "Failed to authenticate token" });
    const user = users.find(u => u.id === decoded.id);
    res.json({ id: user.id, username: user.username });
  });
});

app.use(express.static(path.join(__dirname, "client", "build")));
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "client", "build", "index.html"));
});

app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));
import React, { useState, useEffect } from "react";
import axios from "axios";

function App() {
  const [formData, setFormData] = useState({ username: "", password: "" });
  const [message, setMessage] = useState("");
  const [profile, setProfile] = useState(null);

  const handleChange = e => setFormData({ ...formData, [e.target.name]: e.target.value });

  const handleSubmit = async e => {
    e.preventDefault();
    try {
      const response = await axios.post("/login", formData);
      localStorage.setItem("token", response.data.token);
      setMessage(`Login successful! Welcome ${response.data.username}`);
      getProfile();
    } catch (err) {
      setMessage(err.response?.data?.message || "Login failed");
    }
  };

  const getProfile = async () => {
    const token = localStorage.getItem("token");
    if (!token) return setMessage("You need to login first");
    try {
      const response = await axios.get("/profile", { headers: { Authorization: `Bearer ${token}` } });
      setProfile(response.data);
    } catch (err) {
      setMessage(err.response?.data?.message || "Failed to fetch profile");
    }
  };

  useEffect(() => { if (localStorage.getItem("token")) getProfile(); }, []);

  return (
    <div style={{ maxWidth: "400px", margin: "50px auto" }}>
      <h2>Login</h2>
      <form onSubmit={handleSubmit}>
        <div>
          <label>Username:</label>
          <input type="text" name="username" value={formData.username} onChange={handleChange} required />
        </div>
        <div style={{ marginTop: "10px" }}>
          <label>Password:</label>
          <input type="password" name="password" value={formData.password} onChange={handleChange} required />
        </div>
        <button style={{ marginTop: "20px" }} type="submit">Login</button>
      </form>
      {message && <p style={{ marginTop: "20px" }}>{message}</p>}
      {profile && (
        <div style={{ marginTop: "20px" }}>
          <h3>Profile</h3>
          <p>ID: {profile.id}</p>
          <p>Username: {profile.username}</p>
        </div>
      )}
    </div>
  );
}

export default App;
